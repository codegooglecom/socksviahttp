#####################################
# Socks via HTTP client property file
#####################################

# THIS FILE IS USED BY SOCKS VIA HTTP CLIENT PART
# PLEASE EDIT THIS FILE CAREFULLY OR THE PROGRAM WON'T WORK
# IF YOU MODIFY THIS FILE, PLEASE RESTART THE CLIENT

# DO NOT MODIFY THE FOLLOWING LINE
[SocksViaHttp]

########################################
## MANDATORY OPTIONS
## PLEASE EDIT THESE OPTIONS CAREFULLY
########################################

#----------------------------------
# HTTP servers access configuration
#----------------------------------

# List of the servers you have an account on
# You can add as many servers as you want (separator is comma)
# For example, socks.httpservers = SERVER1, SERVER2, SERVER3
# Most users will only use one server, so the default line may be a good choice
socks.httpservers = SERVER1

# Now you have to provide some informations for all servers defined in the previous line
# The informations you have to provide are : url, user, password, timeout, zip, encryption & secret key

# URL of the servlet on the first HTTP server, please replace "www.yourserver.com" by your server public name
# If you have changed the default HTTP port on the server, please replace "80" by the correct port
socks.SERVER1.url = http://www.yourserver.com:80/svh

# Your login on the first HTTP Server (see initsrv.properties)
socks.SERVER1.user = USER1

# Your password on the first HTTP Server (see initsrv.properties)
socks.SERVER1.password = PASS1

# Timeout (in seconds) for a connection (information sent to the HTTP server)
# If a connection isn't used during this time, it is automatically closed
# If you leave the default value, the default server timeout will be used (see initsrv.properties)
socks.SERVER1.timeout = 180

# Do you want to zip packets on the fly ?
# This is recommended, because it reduces the network traffic and then improves performances.
# Moreover, if the size of the zipped packet is greater than the size of the original packet,
# the original packet is sent.
socks.SERVER1.zipdata = true

# Do you want to encrypt packets on the fly ?
# This is recommended, because the encryption algorithm used is very simple and fast.
# If you use this option, you have to specify the secret encryption key here (see initsrv.properties)
socks.SERVER1.encryptdata = true
socks.SERVER1.encryptionkey = MY_SOCKS_VIA_HTTP_SECRET_ENCRYPTION_KEY


#--------------------
# Proxy configuration
#--------------------

# Enable proxy (default = false)
# set this value to true if you pass through a proxy for your http access
# You can see this in your browser settings for example
# If you set false here, you can ignore all lines in the proxy configuration section
socks.proxy = false
# Proxy address is there is one, otherwise the default value is OK
socks.proxy.host = www.proxy.com
# Proxy port (default is 3128 for Squid, 8080 is often used too)
socks.proxy.port = 3128
# Set socks.proxy.authentication to true if your proxy needs authentication, default = false
# For NTLM proxy read the FAQ at http://cqs.dyndns.org/socks
socks.proxy.authentication = false
# Your login on the proxy
socks.proxy.user = PROXYLOGIN
# Your password on the proxy
socks.proxy.password = PROXYPASSWD


#---------------------------
# Local server configuration
#---------------------------

# Socks Server port (default = 1080)
# 1080 is the default port of the socks protocol (as specified in the RFC)
# You should not change this value, unless you know what you are doing
socks.server.port = 1080

# If you want to share your socks server with other users on other computers, set socks.listen.localhost to false
# The default value is more secure however
socks.listen.localhost = true


#-------------------------------
# Direct tunneling configuration
#-------------------------------

# The following line defines the ports we have to listen to (on the localhost)
# You can add as many port as you want, but this ports must not
# be in use on the localhost. Separator is comma
# For each port listed here, a tunnel to a remote host will be created (look at the next option)
#tunnel.ports.active = 5900, 7000

# For each port defined in the previous line, define the destination of the tunnel, syntax hostname:port or hostIP:port
# THIS IS MANDATORY if you have uncommented the tunnel.ports.active directive.
#tunnel.localport.5900 = myvncserver.com:5900
#tunnel.localport.7000 = myircserver.org:6667


########################################
## ADVANCED OPTIONS
## DON'T CHANGE ANYTHING BELOW THIS LINE
## IF YOU DON'T KNOW WHAT YOU'RE DOING
########################################

#----------------------
# Logging configuration
#----------------------

# Path of the logfile
client.logfile.name = socksclient.log
# Logfile level (0=ALL, 1=DEBUG, 2=INFO, 3=WARN, 4=ERROR, 5=FATAL, 6=OFF), level 6 means no logging to file
client.logfile.level = 2


#-----------------------
# Spy mode configuration
#-----------------------

# The spy mode allows the client to create one or two files per connection, containing all transferred data
# Be careful, the logfiles could become very large. I do NOT recommend to use this option (except for debugging)
# The value can be 0(none), 1(log data sent by the client), 2(log data sent by the server)
# or 3(log both)
#client.spymode = 0


#----------------------
# Minimize HTTP traffic
#----------------------

# I recommend to use all default settings in this section

# Contact the server only if the client has new data to send
# If your HTTP traffic in unlimited you can set this option to false
# but it is not recommended because it uses A LOT of HTTP traffic.
socks.requestonlyifclientactivity = true

# During this delay (in ms), the client will not try to minimize HTTP traffic
# This option is useful because a lot of traffic is generated when a connection is
# establishing between a client and a server.
# The default value (10s) should be fine
socks.donttrytominimizetrafficbefore = 10000

# These options allow you to do "intelligent" HTTP traffic minimizing
# The client won't try to minimize traffic during this delay as soon
# as it sends or receives data to/from the server
# The default values (5s) should be fine
socks.continuerequestingafterdatareceivedduring = 5000
socks.continuerequestingafterdatasentduring = 5000

# Every time this delay (in ms) is reached, a request to the server is performed even if there is no client activity
# This is useful if you are connected to a server that can send alerts or callback
# Use case: if you are connected to IRC or ICQ, and another user sends a message to you
# A delay of 0 means no update is forced (I DO NOT RECOMMEND THE VALUE 0 AT ALL)
# The default value (15s) should be fine
# However, if you want to use even less HTTP traffic, you can increase this value.
socks.forcerequestafter = 15000


#---------------------------------
# Resistance to HTTP request drops
#---------------------------------

# The two following options allow Socks via HTTP to be used even with a bad connection line or a poor proxy.
# The client makes up to socks.maxretries retries to get a successful response from the server (0 means no retry is performed)
# If after all the retries the client hasn't got a successful connection from the server, the connection is closed
# The delay between two retries is in ms
socks.maxretries = 10
socks.delaybetweenretries = 3000


#------------------------
# Customize client engine
#------------------------

# Delay (in ms) between two requests on the server
# DO NOT CHANGE THE DEFAULT VALUE (20ms)
socks.delay = 20

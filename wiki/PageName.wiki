#summary One-sentence summary of this page.

=  Documentation =

This program has been written for people having a limited access at work (http access), and who want to use some network services like ftp, irc, telnet.


== I - Quick description ==

This program has been written for people having a limited access at work (http access), and who want to use some network services like ftp, irc, telnet, ...

== II - Prerequisites ==


This program is intended to use network services where normally you cannot because of firewalls and proxies. As a consequence, you must know what a firewall and a proxy are, and how to use a traditionnal socks server.

Socks via HTTP is 100% Java, so you'd better know what Java is (or at least you need to know how to read man pages).

You need a "firewalled" computer (lets say the computer you use at work). This computer must have at least access to WWW. (if you full access, why the hell are you reading this documentation ?).

You need a server located outside the firewalled area(lets say your computer with permanent connection at home, thanks cable or xDSL). This server must have FULL ACCESS to the Internet.

== III - How it works ==
[http://socksviahttp.googlepages.com/socksviahttp_howItWorks.png]
== ==
As you can see, the socks server is now "splitted" in two distinct parts, called 2a and 2b. The Socks via HTTP client part, named 2a, acts as a socks server, and must be running on the localhost. You have to configure you program (ie mIRC, CRT or whatever) to use a socks server running on 127.0.0.1 port 1080.

The part 2a communicates with the part 2b using HTTP (and then bypasses firewalls and proxies), and the part 2b establishes the real connection to the final server. As you can guess, the part 2b must be running on a computer having full access to the Internet (understand not firewalled). On the schema, the firewalled area is located on the left of the HTTP Tunnel.

The part 2b is actually a java servlet (for now). Don't forget that the part 2b must be accessed by part 2a via HTTP, so you have to install this part 2b on a server that have a static ip, or use a service like dynip (windows), or dyndns (linux). 
* As the program is 100% Java, you can use any OS combinaison you want:
    # Server part 2b on Linux, Client part 2a on Windows.
    # Both Server part and client part on Linux.
    # Both Server part and client part on Windows.
    # Server part 2b on Windows, Client part 2a on Linux.
